[{"title":"【Python】二进制、八进制、十进制、十六进制之间的转换","date":"2020-04-27T13:35:57.000Z","path":"article/202004272135.html","text":"二进制进制转其他二进制转八进制：oct(int(n,2))12n=input()print(oct(int(n,2))) 二进制转十进制：int(n,2)12n=input()print(bin(n)) 二进制转十六进制：hex(int(n,2))12n=input()print(hex(int(n,2))) 八进制转其他进制八进制转二进制：bin(int(n,8))12n=input()print(bin(int(n,8))) 八进制转十进制：int(n,8)12n=input()print(int(n,8)) 八进制转十六进制：hex(int(n,16))12n=input()print(hex(int(n,8))) 十进制转其他进制十进制转二进制：bin(n)12n=int(input())print(bin(n)) 十进制转八进制：oct(n)12n=int(input())print(oct(n)) 十进制转十六进制：hex(n)12n=int(input())print(hex(n)) 十六进制转其他进制十六进制转二进制：bin(int(n,16))12n=input()print(bin(int(n,16))) 十六进制转八进制：oct(int(n,16))12n=input()print(oct(int(n,16))) 十六进制转十进制：int(n,16)12n=input()print(int(n,16)) 十进制转其他进制（int、float类型）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding: utf-8 -*-from typing import TypeVarimport mathparamNum = TypeVar('paramNum', float, int) # Must be float or int# int、float类型：十进制转二、八、十六、三十二...进制def decimal_system_to(x: paramNum, base: int, digit: int = 0) -&gt; str: \"\"\" :param x: 值，int或float类型 :param base: 进制，如：2，8，16，32，int类型，传10返回传入参数保留小数位四舍五入后的值 :param digit: 显示小数的位数，默认不显示，int类型，正整数 :return: 返回str类型的结果 \"\"\" if base &gt;= 2 and digit &gt;= 0 and isinstance(base, int) and isinstance(digit, int): hex_list = [str(x) for x in range(10)] if base &gt; 10: hex_list.extend([chr(x) for x in range(ord('A'), ord('A') + (base - 10))]) if isinstance(x, int) or isinstance(x, float): if x &lt; 0: return '-' + decimal_system_to(abs(x), digit) result = [] # 计算整数部分 integer = int(x) while True: integer, remainder = divmod(int(integer), base) result.insert(0, str(hex_list[remainder])) if integer == 0: break # 计算小数部分 if digit: result.append('.') flag = 0 decimal = math.modf(x)[0] while flag &lt; digit: decimal = decimal * base result.append(str(hex_list[int(decimal)])) if math.modf(decimal)[0] == 0: result.append('0' * (digit - flag - 1)) break if decimal &gt; 0: decimal = math.modf(decimal)[0] flag += 1 return ''.join(result) else: return '%s cannot be interpreted as an integer' % (str(x)) elif isinstance(base, float): return 'base must be integer' elif base == 0: return ('%.' + '%df' % digit) % x elif base &lt; 2: return 'base must be &gt;= 2, or 0' elif isinstance(digit, float): return 'base must be integer' elif digit &lt; 0: return 'digit must be &gt;= 0'","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"【测试设计】登录功能测试设计","date":"2020-04-18T15:05:03.000Z","path":"article/202004182305.html","text":"登录界面：用户名、密码、登录、勾选框（记住密码）、注册 功能测试 输入已注册的用户名和正确的密码登录，验证登录成功（正确登录） 输入已注册的用户名和错误的密码登录，验证登录失败，且提示信息正确（错误校验） 输入未注册的用户名和任意密码登录，验证登录失败，且提示信息正确 输入未激活的用户名密码登录，验证登录失败，且提示信息正确 输入已注销的用户名密码登录，验证登录失败，且提示信息正确 用户名和密码都为空，验证登录失败，且提示信息正确（非空校验） 用户名和密码两者之一为空，验证登录失败，且提示信息正确（非空校验） 用户名和密码中含有空格的处理 用户名和密码是否对大小写敏感 用户名和密码的长度限制 输入密码时，键盘的大小写是否开启是否有提示 密码输入框是否有加密显示 如果启用验证码，验证码是否容易识别 如果启用验证码，输入正确的用户名、密码、验证码，验证登录成功 如果启用验证码，输入正确的用户名、密码和错误的验证码，验证登录失败，且提示信息正确 如果启用验证码，输入正确的用户名、密码，验证码为空，验证登录失败，且提示信息正确 如果启用验证码，验证码图片是否可以正常更换验证码，更换后是否可用 如果启用验证码，刷新页面是否会刷新验证码 如果启用验证码，验证码具有时效性，分别验证时效性内、外的有效性 快捷键tab和enter是否可以使用 用户第一次登录时，是否提示修改密码 不同权限的用户登录，展示的权限内容是否正确 用户成功登录，会话超时，继续操作是否会重定向用户登录界面 安全测试","tags":[{"name":"测试设计","slug":"测试设计","permalink":"http://yoursite.com/tags/%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1/"},{"name":"测试点","slug":"测试点","permalink":"http://yoursite.com/tags/%E6%B5%8B%E8%AF%95%E7%82%B9/"}]},{"title":"【数据库】MySQL的下载与安装教程","date":"2020-04-17T14:33:13.000Z","path":"article/202004172233.html","text":"Window环境1.下载MySQL 下载地址 根据需要下载安装包 2.安装 将下载的安装解压至指定的路径，如","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}]},{"title":"【安全测试】SQL注入测试总结","date":"2020-04-15T06:55:12.000Z","path":"article/202004151455.html","text":"前言本文参考《SQL注入攻击与防御》（第2版），记录对SQL注入测试方法进行一些个人的理解和总结。不要轻易尝试SQL注入操作，除非已得到应用或系统所有者的许可(最好是书面形式)！！！","tags":[{"name":"安全测试","slug":"安全测试","permalink":"http://yoursite.com/tags/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"},{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"}]},{"title":"【Hexo博客】Hexo+GitHub搭建blog","date":"2020-04-13T14:01:06.000Z","path":"article/202004132201.html","text":"1.Git安装 下载地址 安装步骤：双击下载好的exe文件，一直next 安装好后，打开gitbash，查看版本 1$ git --version 2.node.js安装 下载地址 安装步骤：双击下载好的msi文件，一直next，注意在Custom Setup这步选择Add to PATHS，可以自动配置环境变量 安装好后，使用gitbash或window的命令行查看版本 1$ node -v 如果查看版本报错，需要查看环境变量是否配置成功 3.node.js安装","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"Hello World","date":"2020-04-13T09:03:12.707Z","path":"article/202004131703.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]