[{"title":"【Python+Django】Django1.10.3在python3.8报错","date":"2021-08-23T08:56:14.000Z","path":"article/202108231656.html","text":"Django 1.10.3版本，Python 3.8.2版本，django项目创建成功，进入项目文件夹中，使用python manage.py报runtimeerror错误：RuntimeError: class not set defining ‘AbstractBaseUser’ as &lt;class ‘django.contrib.auth.base_user.AbstractBaseUser’&gt;. Was classcell propagated to type.new? 解决方案： 在文件Python38/Lib/site-packages/django/db/models/base.py加上如下代码： 12345new_attrs = &#123;'__module__': module&#125;classcell = attrs.pop('__classcell__', None)if classcell is not None:new_attrs['__classcell__'] = classcellnew_class = super_new(cls, name, bases, new_attrs) 位置如下：","tags":[{"name":"Django","slug":"Django","permalink":"https://yuxinla.github.io/tags/Django/"}]},{"title":"【Python】解析带注释的json文件型","date":"2020-06-02T13:02:41.000Z","path":"article/202006022102.html","text":"1234567891011121314151617181920212223242526272829303132# -*- coding: utf-8 -*-import jsonimport redef json_to_dict(path): \"\"\" Parse a JSON file First remove comments and then use the json module package Comments look like : // ... or /* ... */ \"\"\" comment_re = re.compile(r'(^)?[^\\S\\n]*/(?:\\*(.*?)\\*/[^\\S\\n]*|/[^\\n]*)($)?', re.DOTALL | re.MULTILINE) url_re = re.compile( r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*(),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+') content = '' with open(path, encoding='utf-8') as f: for line in f.readlines(): # Looking for http url_match = url_re.search(line) # Looking for comments match = comment_re.search(line) while match and not url_match: # single line comment line = line[:match.start()] + line[match.end():] match = comment_re.match(line) content += ''.join(line) # Return dict return json.loads(content) 该方法可以去除带有注释的json文件，若注释中存在网址或与有网址同行的注释，则无法去除，建议使用json5 1pip install json5 123456import json5jsonStr = '''&#123; \"status\": 200,//成功返回值200 \"message\": \"已成功获取http://www.baidu.com\"//http://www.baidu.com&#125;'''print(json5.loads(jsonStr))","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"},{"name":"json","slug":"json","permalink":"https://yuxinla.github.io/tags/json/"}]},{"title":"【app自动化-Appium】Appium环境搭建","date":"2020-05-31T05:59:01.000Z","path":"article/202005311359.html","text":"JDK安装 官网下载：https://www.oracle.com/java/technologies/javase-downloads.html （跳过登录方法） 环境变量配置 123JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_251PATH=%JAVA_HOME%\\binPATH=%JAVA_HOME%\\jre\\bin 检查安装 1234C:\\Users\\Jia&gt;java -versionjava version \"1.8.0_251\"Java(TM) SE Runtime Environment (build 1.8.0_251-b08)Java HotSpot(TM) 64-Bit Server VM (build 25.251-b08, mixed mode) SDK安装 下载Android SDK安装包 官网下载：https://android-sdk.en.softonic.com/download 网盘下载：http://tools.android-studio.org/index.php/sdk Android SDK Manager 打开SDK安装目录下的SDK Manager.exe Android SDK Tools（必须，只需下载一个版本，一般选最新版本）：基础工具包 Android SDK Platfrom-tools（必须，只需下载一个版本，一般选最新版本）：存放公用开发工具 Android SDK Build-tools（必须，可以安装多个版本）：Android项目构建工具 Android xxx （API xx）目录（可选的个平台开发工具，向下兼容，一般最新版本，勾选SDK Platform） SDK Platform（必须）：对应平台的开发工具 Extras目录（可选的扩展）：主要下载Google USB Driver和Google Web Driver 环境变量配置（tools的环境变量确认下是否有bin） 1234ANDROID_HOME=C:\\android-sdk-windowsPATH=%ANDROID_HOME%\\platform-toolsPATH=%ANDROID_HOME%\\tools\\binPATH=%ANDROID_HOME%\\build-tools\\29.0.3 检查安装 adb 1234C:\\Users\\Jia&gt;adbAndroid Debug Bridge version 1.0.41Version 29.0.6-6198805Installed as C:\\AppTest\\Android\\android-sdk\\platform-tools\\adb.exe aapt 12C:\\Users\\Jia&gt;aaptAndroid Asset Packaging Tool monkeyrunner 执行报错： 123C:\\Users\\Jia&gt;monkeyrunnerSWT folder '..\\framework\\x86_64' does not exist.Please set ANDROID_SWT to point to the folder containing swt.jar for your platform. 解决方案： 打开monkeyrunner.bat，修改： 1234567set frameworkdir=lib# 改为set frameworkdir=..\\lib-Dcom.android.monkeyrunner.bindir=..\\framework -jar %jarpath% %*# 改为-Dcom.android.monkeyrunner.bindir=..\\..\\platform-tools -jar %jarpath% %*","tags":[{"name":"app自动化","slug":"app自动化","permalink":"https://yuxinla.github.io/tags/app%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"Appium","slug":"Appium","permalink":"https://yuxinla.github.io/tags/Appium/"}]},{"title":"【Android自动化-UiAutomator2.0】UiAutomator2.0使用过程中遇到的各种问题记录","date":"2020-05-29T14:33:48.000Z","path":"article/202005292233.html","text":"新安装的Android Studio，第一次编译项目的时候，一直在下载 fastutil-7.2.0.jar解决方案：修改一下buil.gradle 12345678910111213141516171819202122232425262728293031// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123; repositories &#123; maven &#123; url = \"http://maven.aliyun.com/nexus/content/groups/public/\" &#125; google() jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:3.6.3' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; maven &#123; url = \"http://maven.aliyun.com/nexus/content/groups/public/\" &#125; google() jcenter() &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; Error running ‘app’: No target device found.安卓调试问题报错信息： 原因分析：未检测到设备，包括真机和虚拟机 解决方案： 在Terminal执行adb devices命令，查看有没有连接到的设备 如果是没有查到设备，确认虚拟机是否安装，是否打开；确认真机是否连接打开USB调试并安装驱动，可执行adb kill-server和adb start-server这两个命令重启 如果有设备，选择run —&gt;EditConfiguration—&gt;General，查看Deployment Target Options选项，查看设置的Taget是否有问题，以及是否选中了Use same device for future launches选项","tags":[{"name":"Android自动化","slug":"Android自动化","permalink":"https://yuxinla.github.io/tags/Android%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"UiAutomator","slug":"UiAutomator","permalink":"https://yuxinla.github.io/tags/UiAutomator/"},{"name":"app","slug":"app","permalink":"https://yuxinla.github.io/tags/app/"}]},{"title":"【Android自动化-UiAutomator2.0】UiAutomator2.0环境配置","date":"2020-05-28T14:44:21.000Z","path":"article/202005282244.html","text":"JDK安装1.下载地址：https://www.oracle.com/java/technologies/javase-downloads.html 2.这里下载的是：jdk-8u251-windows-x64.exe，跳过登录下载，试试：http://download.oracle.com/otn/java/jdk/8u251-b08/3d5a2bb8f8d4428bbe94aed7ec7ae784/jdk-8u251-windows-x64.exe 3.直接双击安装 4.环境配置（我的安装路径为C:\\Program Files\\Java\\jdk1.8.0_251） 新增系统变量：JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_251 PATH增加：%JAVA_HOME%\\bin PATH增加：%JAVA_HOME%\\jre\\bin 5.验证jdk是否安装成功，打开cmd命令提示符。输入一下命令，可以查看版本，无报错即安装成功 12java -versionjavac -version AS(Android Studio)安装1.下载地址：https://developer.android.google.cn/studio/index.html 2.这里下载的是：android-studio-ide-192.6392135-windows.exe 3.直接双击安装，安装好后打开 弹窗选择： Import Studio settings from : Do not import settings -&gt; OK Android Studio First Run : Cancel Addroid Studio Setup Wizard Welcome: Next Install Type: Custom -&gt; Next Select default JDK Location: JAVA_HOME -&gt; Next Select UI Theme: 选择主题 -&gt; Next SDK Components Setup: 选择SDK安装路径 -&gt; Next Emulator Settings: 使用默认配置 -&gt; Next Verify Settings: Finish Downloading Components: Finish 4.配置SDK，Configure -&gt; SDK Manager 5.配置Android环境 选择需要的版本，点击Apply 点击OK 点击Accept -&gt; Next 等待下载完成，点击Finish SDK环境配置1.系统环境变量配置 新增系统变量：ANDROID_HOME=C:\\android-sdk-windows PATH增加：%ANDROID_HOME%\\platform-tools PATH增加：%ANDROID_HOME%\\tools 虚拟机的安装1.点击Tools -&gt; AVD Manager 2.点击Create Virtual Device… 3.选择API 4.根据Android版本选择想要的，点击Download 5.等待安装完成 6.选择安装的image -&gt; Next -&gt; Finish 7.虚拟机安装完成","tags":[{"name":"Android自动化","slug":"Android自动化","permalink":"https://yuxinla.github.io/tags/Android%E8%87%AA%E5%8A%A8%E5%8C%96/"},{"name":"UiAutomator","slug":"UiAutomator","permalink":"https://yuxinla.github.io/tags/UiAutomator/"},{"name":"app","slug":"app","permalink":"https://yuxinla.github.io/tags/app/"}]},{"title":"【杂记】记录工作、学习过程中易忘的知识点","date":"2020-05-28T09:07:27.000Z","path":"article/202005281707.html","text":"前言在工作中总会遇到一些比较简单但容易忘记的知识点，做个笔记，方便查找 SQL MySQL日期字符串类型互转 12345-- data_format 日期转字符串select date_format(Now(), '%Y-%m-%d %H:%i');-- str_to_date 字符串转日期select str_to_date('2008.08.09 08:09:30', '%Y.%m.%d %h:%i:%s'); -- 2008-08-09 08:09:30 1 JAVA JDK下载地址：https://developer.android.google.cn/studio/index.html 跳过登录下载，在网上找到分享的账号：https://blog.csdn.net/qq_40298231/article/details/98485608?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase openjdk的下载网址：http://jdk.java.net/ SVN SVN打基线方法：https://blog.51cto.com/angustung/1940255","tags":[{"name":"杂记","slug":"杂记","permalink":"https://yuxinla.github.io/tags/%E6%9D%82%E8%AE%B0/"}]},{"title":"【Python】Linux下非root用户安装python3","date":"2020-05-27T13:37:53.000Z","path":"article/202005272137.html","text":"前言工作过程中，遇到自动化框架python2改为python3时，服务器上未安装python3环境，无外网，在非root用户下安装python3环境的情况，记录一下 安装python3 下载python3安装包，网址：https://www.python.org/downloads/source/ 此处我选择3.8.3版本的 将下载的安装包上传至服务器上并解压 123456tar -xzf Python-3.8.3.tgzmkdir -p /home/python38 # 这里新建python安装路径，安装在其他地方也可以，这里选择home下cd Python-3.8.3./configure --prefix=\"/home/python38\"makemake install 一般来说，上述完成后pip已经安装好了，可在/home/python38/bin/下看到 环境变量配置 打开配置文件 1vi ~/.bash_profile 在~/.bash_profile文件中配置 12export PATH=\"$PATH:/home/python38\"export PATH=\"$PATH:/home/python38/bin\" 保存文件后，执行 1source ~/.bash_profile 查看python是否已安装成功 1python --version 安装第三方模块 在官网下载第三方模块，官网：https://pypi.org/ 两种文件均可下载 安装*.whl文件 1pip3 install requests-2.23.0-py2.py3-none-any.whl 安装*.tar.gz文件 1pip3 install requests-2.23.0.tar.gz 安装时出现以下情况 12ERROR: Could not find a version that satisfies the requirement soupsieve&gt;=1.2 (from beautifulsoup4==4.9.1) (from versions: none)ERROR: No matching distribution found for soupsieve&gt;=1.2 (from beautifulsoup4==4.9.1) 报错信息意思是：需要先安装soupsieve模块，版本要&gt;=1.2","tags":[{"name":"python","slug":"python","permalink":"https://yuxinla.github.io/tags/python/"},{"name":"Linux","slug":"Linux","permalink":"https://yuxinla.github.io/tags/Linux/"}]},{"title":"【Python+Robotframework】Robotframework接口自动化","date":"2020-05-19T15:48:02.000Z","path":"article/202005192348.html","text":"前言在robot framework中，requestslibrary、httplibrary.http、rest等库，都可以用来做http接口方面的自动化测试 requestslibrary 安装： 12pip install requestspip install robotframework-requests 使用：","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"},{"name":"Robotframework","slug":"Robotframework","permalink":"https://yuxinla.github.io/tags/Robotframework/"},{"name":"接口自动化","slug":"接口自动化","permalink":"https://yuxinla.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"}]},{"title":"【Python+Robotframework】Robotframework安装使用的报错及解决方案","date":"2020-05-18T15:18:36.000Z","path":"article/202005182318.html","text":"安装intelliBot插件报错报错信息： 解决方案： 打开下载IDEA插件的网址 https://plugins.jetbrains.com 搜索插件名字 搜索intelliBot并下载 打开pycharm，File-&gt;Settings-&gt;Plugins，点击Install Plugin from Disk…选择下载的jar包，然后重启即可 无法下载intelliBot插件报错信息： ​ 打开IDEA插件的网址，出现： ​ 解决方案： 附上intelliBot的下载网盘： 链接：https://pan.baidu.com/s/1OuXe8uBt_nyR0ui7hBEIkA提取码：x9f4 在“C:\\Windows\\System32\\drivers\\etc”路径下的“hosts”文件中加上”199.232.68.133 raw.githubusercontent.com“，无法直接改hosts文件的时候可以先复制到桌面，改完后替换文件 打开pycharm，点击File-&gt;Settings-&gt;Plugins，输入IntelliBot，点击Install下载就可以了 RobotFramework的RIDE启动报错报错信息： ​ 解决方案： 在python3的安装文件下Lib\\site-packages\\robotide\\application\\application.py文件中的Onlnit方法中增加 1self.locale = wx.Locale(wx.LANGUAGE_ENGLISH) pycharm代码内容和控制台中文乱码解决方案： 打开pycharm，点击File-&gt;Settings-&gt;Editor-&gt;Font，将Fallback font改为有中文的字体 打开Editor-&gt;Color Scheme -&gt; Console Font，将第一个Font改为带有中文的字体","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"},{"name":"Robotframework","slug":"Robotframework","permalink":"https://yuxinla.github.io/tags/Robotframework/"}]},{"title":"【Python+Robotframework】pycharm下robotframework环境搭建","date":"2020-05-18T07:45:25.000Z","path":"article/202005181545.html","text":"前言习惯了用pycharm写自动化用例，为了可以更好的使用，配置pycharm下robotframework环境搭建。python2已经停止维护，robotframework-ride最近已更新支持python3，本文的环境搭建是基于python3的 安装 安装Python3，官网：https://www.python.org/ 自行下载安装 安装robotframework 1pip install robotframework 安装robotframework-ride 1pip install robotframework-ride 若安装其他模块，自行安装：pip install xxx(模块名) 安装pycharm，官网：https://www.jetbrains.com/pycharm/download/ 自行下载安装 配置pycharm的robot framework环境 打开pycharm，新建*.robot的文件 打开新建的文件，点击文件上方出现的Install plugins 安装IntelliBot和Robot Framework Support 在设置面板的Editor-&gt;File Types界面，找到 Robot Feature ，添加*.txt后缀参数（如下图），可按自己实际需要来添加 配置case和suite的运行Tools打开pycharm，点击File-&gt;Settings-&gt;Tools-&gt;External Tools界面，新增一个Tools 运行单个用例 Name：Robot Run SingleTestCase Program：C:\\Python\\Python38\\Scripts\\robot.exe（python安装目录下） Arguments：log是放置生成结果的文件侠 1-d log --test \"$SelectedText$\" $FilePath$ Working directory：$ProjectFileDir$ 使用方式： 运行当前集合的用例 Name：Robot Run SuiteTestCase Program：C:\\Python\\Python38\\Scripts\\robot.exe（python安装目录下） Arguments：log是放置生成结果的文件侠 1-d log $FilePath$ Working directory：$ProjectFileDir$ 运行所有用例 Name：Robot Run AllTestCase Program：C:\\Python\\Python38\\Scripts\\robot.exe（python安装目录下） Arguments：log是放置生成结果的文件侠 1-d log $FileDir$ Working directory：$ProjectFileDir$ 配置和使用过程中出现的报错【Python+Robotframework】Robotframework安装使用的报错及解决方案","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"},{"name":"Robotframework","slug":"Robotframework","permalink":"https://yuxinla.github.io/tags/Robotframework/"}]},{"title":"【Python】时间相关模块(datetime、time)","date":"2020-05-13T12:50:15.000Z","path":"article/202005132050.html","text":"datetime、time模块主要的类处理日期（年月日） 1datetime.date() 处理时间（时分秒、毫秒） 1datetime.time() 处理日期+时间 1datetime.datetime() 处理时段（时间间隔） 1datetime.timedelta() 获取当前时间1datetime.datetime.today() 1datetime.datetime.now() 时间戳时间上的加减法","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"}]},{"title":"【Python】时间戳转换","date":"2020-05-12T13:13:54.000Z","path":"article/202005122113.html","text":"时间戳转换123456789101112131415161718192021222324252627282930import datetimeimport time# 当前时间转换为时间戳def now_to_timestamp(digits=10): time_stamp = int(round(time.time() * (10 ** (digits - 10)))) return time_stamp# 将输入的时间转换为时间戳def time_to_timestamp(time_str): try: time_str = datetime.datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S') time_stamp = int(round(time.mktime(time_str.timetuple()))) return time_stamp except Exception as e: return e# 将输入的时间戳转为时间def timestamp_to_time(timestamp): try: if len(str(timestamp)) &gt; 10: timestamp = timestamp*(10**(10-len(str(timestamp)))) time_str = datetime.datetime.fromtimestamp(timestamp) time_str = datetime.datetime.strftime(time_str, '%Y-%m-%d %H:%M:%S') return time_str except Exception as e: return e","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"}]},{"title":"【Python+Selenium】Selenium中无法点击元素情况分析","date":"2020-05-12T04:58:39.000Z","path":"article/202005121258.html","text":"Selenium中经常会出现元素无法点击的情况，争对该情况做出分析：1.判断元素是否可以点击，is_ 2.可点击元素响应时间较慢，或网速不好，使用适合的等待时间 3.元素被其他元素遮挡，如被下拉列表遮挡，可先点击其他无影响元素 4.","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"},{"name":"Selenium","slug":"Selenium","permalink":"https://yuxinla.github.io/tags/Selenium/"}]},{"title":"【Python】Python语言标准库","date":"2020-05-11T06:09:39.000Z","path":"article/202005111409.html","text":"标准库在安装Python时就默认已经安装好的模块，Python具有功能强大的标准库 数字和数学模块numbers：数字抽象基类 math：数学函数 cmath：复数的数学函数 decimal：十进制定点和浮点算术 fractions：有理数 random：生成伪随机数 statistics：数学统计功能 数据类型datetime：基本日期和时间类型 calendar：与日历相关的一般功能 collections：容器数据类型 heapq：堆队列算法 bisect：数组二分算法 array：高效的数值数组 weakref：弱引用 types：动态类型创建和内置类型的名称 copy：浅层和深层复制操作 pprint：格式化输出 reprlib：备用repr()实现 enum：支持枚举 功能编程模块itertools：为高效循环创建迭代器的函数 functools：可调用对象的高阶函数和操作 operator：标准运算符作为函数 数据持久化pickle：Python对象序列化 copyreh：注册pickle支持功能 shelve：Python对象持久化 marshal：内部Python对象序列化 dbm：与Unix“数据库”的接口 sqlite3：SQLite数据库的DB-API 2.0接口 数据压缩和存档zlib：与gzip兼容的压缩 gzip/bz2：支持gzip/bzip2文件 lzma：使用LZMA算法进行压缩 zipfile：使用ZIP存档 tarfiel：读取和写入tar归档文件 文件格式csv：CSV文件读写 configparser：配置文件解析器 netrc：netrc文件处理 xdrlib：对XDR数据进行编码和解码 plistlib：生成并解析MAC OS X.plist文件 文件和目录访问pathlib：面向对象的文件系统路径 os.path：常见的路径名操作 fileinput：迭代多个输入流中的行 stat：解释stat()结果 filecmp：文件和目录比较 tempfile：生成临时文件和 目录 glob：Unix文件名模式匹配 fnmatch：Unix文件名模式匹配 linecache：随机访问文本行 shutil：高级文件操作 macpath：Mac OS 9路径操作函数 通用操作系统服务os：其他操作系统接口 io：用于处理流的核心工具 time：时间访问和转换 argparse：用于命令行选项，参数和子命令的解析器 getopt：用于命令行选项的C风格解析器 logging：Python的日志记录工具 getpass：便携式密码输入 curses：字符单元格显示的终端处理 platform：访问底层平台的标识数据 errno：标准errno系统符号 ctypes：Python的外部函数库 并发执行threading：基于线程的并行性 multiprocessing：基于进程的并行性 concurrent.futures：启动并行任务 subprocess：子流程管理 sched：事件调度程序 queue：同步的队列类 _thread：低级线程API 加密服务hashlib：安全哈希和消息摘要算法接口 hmac：用于消息身份验证的密钥哈希算法 secrets：生成用于管理机密的安全随机数 网络和进程间通信asyncio：异步I/O socket：低级网络接口 ssl：套接字对象的TLS/SSL包装器 select：等待I/O完成 selectors：高级I/O复用 asyncore：异步套接字处理程序 asynchat：异步套接字命令/响应处理程序 signal：设置异步事件的处理程序 互联网数据处理email：电子邮件和MIME处理包 json：JSON编码器和解码器 mailcap：Mailcap文件处理 mailbox：以各种格式处理邮箱 mimetypes：将文件名映射到MIME类型 base64：Base16/Base32/Base64/Base85数据编码 binhex：对binhex4文件进行编码和解码 binascii：在二进制和ASCII之间转换 quopri：对MIME引用的可打印数据进行编码和解码、 uu：对uuencode文件进行编码和解码 互联网协议和支持webbrowser：Web浏览器控制器 cgi：通用网关接口支持 cgitb：CGI脚本的回溯管理器 wsgiref：WSGI使用程序和参考实现 urllib：URL处理模块 http：HTTP模块 ftplib/poplib/imaplib/nntplib/smtplib：FTP/POP3/IMAP4NNTP/SMTP协议客户端 smtpd：SMTP服务器 telnetlib：Telnet客户端 socketserver：网络服务器的框架 xmlrpc：XMLRPC服务器和客户端模块 ipaddress：IPv4/IPv6操作库 多媒体服务audioop：处理原始音频数据 aifc：读写AIFF和AIFC文件 sunau：读取和写入Sun AU文件 wave：读写IFF分块数据 colorsys：颜色系统之间的转换 imghdr：确定图像的类型 sndhdr：确定声音文件的类型 ossaudiodev：访问兼容OSS的音频设备 结构化标记处理工具html：超文本标记语言支持 xml：XML处理模块 程序框架turtle：海龟作图库 cmd：支持面向行的命令解释器 shlex：简单的此法分析 图形用户界面tkinter：Tcl/Tk的Python接口","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"}]},{"title":"【Python】pip install很慢的解决方案","date":"2020-04-29T14:48:44.000Z","path":"article/202004292248.html","text":"pip install 安装时出现： 1234Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x03B605F8&gt;, 'Connection to pypi.python.org timed out. (connect timeout=15)')': /simple/xlrd/ 解决方案： 切换镜像 豆瓣(douban) http://pypi.douban.com/simple/ 1pip install xxx -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com 阿里云 http://mirrors.aliyun.com/pypi/simple/ 1pip install xxx -i http:&#x2F;&#x2F;mirros.aliyun.com&#x2F;pypi&#x2F;simple&#x2F; --trusted-host mirros.aliyun.com 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 1pip install xxx -i https://pypi.mirros.ustc.edu.cn/simple/ --trusted-host pypi.mirros.ustc.edu 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 1pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 1pip install xxx -i http://pypi.mirros.ustc.edu.cn/simple --trusted-host pypi.mirros.ustc.edu.cn/simple","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"}]},{"title":"【Python】二进制、八进制、十进制、十六进制之间的转换","date":"2020-04-27T13:35:57.000Z","path":"article/202004272135.html","text":"二进制进制转其他二进制转八进制：oct(int(n,2))12n=input()print(oct(int(n,2))) 二进制转十进制：int(n,2)12n=input()print(bin(n)) 二进制转十六进制：hex(int(n,2))12n=input()print(hex(int(n,2))) 八进制转其他进制八进制转二进制：bin(int(n,8))12n=input()print(bin(int(n,8))) 八进制转十进制：int(n,8)12n=input()print(int(n,8)) 八进制转十六进制：hex(int(n,16))12n=input()print(hex(int(n,8))) 十进制转其他进制十进制转二进制：bin(n)12n=int(input())print(bin(n)) 十进制转八进制：oct(n)12n=int(input())print(oct(n)) 十进制转十六进制：hex(n)12n=int(input())print(hex(n)) 十六进制转其他进制十六进制转二进制：bin(int(n,16))12n=input()print(bin(int(n,16))) 十六进制转八进制：oct(int(n,16))12n=input()print(oct(int(n,16))) 十六进制转十进制：int(n,16)12n=input()print(int(n,16)) 十进制转其他进制（int、float类型）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# -*- coding: utf-8 -*-from typing import TypeVarimport mathparamNum = TypeVar('paramNum', float, int) # Must be float or int# int、float类型：十进制转二、八、十六、三十二...进制def decimal_system_to(x: paramNum, base: int, digit: int = 0) -&gt; str: \"\"\" :param x: 值，int或float类型 :param base: 进制，如：2，8，16，32，int类型，传10返回传入参数保留小数位四舍五入后的值 :param digit: 显示小数的位数，默认不显示，int类型，正整数 :return: 返回str类型的结果 \"\"\" if base &gt;= 2 and digit &gt;= 0 and isinstance(base, int) and isinstance(digit, int): hex_list = [str(x) for x in range(10)] if base &gt; 10: hex_list.extend([chr(x) for x in range(ord('A'), ord('A') + (base - 10))]) if isinstance(x, int) or isinstance(x, float): if x &lt; 0: return '-' + decimal_system_to(abs(x), digit) result = [] # 计算整数部分 integer = int(x) while True: integer, remainder = divmod(int(integer), base) result.insert(0, str(hex_list[remainder])) if integer == 0: break # 计算小数部分 if digit: result.append('.') flag = 0 decimal = math.modf(x)[0] while flag &lt; digit: decimal = decimal * base result.append(str(hex_list[int(decimal)])) if math.modf(decimal)[0] == 0: result.append('0' * (digit - flag - 1)) break if decimal &gt; 0: decimal = math.modf(decimal)[0] flag += 1 return ''.join(result) else: return '%s cannot be interpreted as an integer' % (str(x)) elif isinstance(base, float): return 'base must be integer' elif base == 0: return ('%.' + '%df' % digit) % x elif base &lt; 2: return 'base must be &gt;= 2, or 0' elif isinstance(digit, float): return 'base must be integer' elif digit &lt; 0: return 'digit must be &gt;= 0'","tags":[{"name":"Python","slug":"Python","permalink":"https://yuxinla.github.io/tags/Python/"}]},{"title":"【测试设计】登录功能测试设计","date":"2020-04-18T15:05:03.000Z","path":"article/202004182305.html","text":"登录界面：用户名、密码、登录、勾选框（记住密码）、注册 功能测试 输入已注册的用户名和正确的密码登录，验证登录成功（正确登录） 输入已注册的用户名和错误的密码登录，验证登录失败，且提示信息正确（错误校验） 输入未注册的用户名和任意密码登录，验证登录失败，且提示信息正确 输入未激活的用户名密码登录，验证登录失败，且提示信息正确 输入已注销的用户名密码登录，验证登录失败，且提示信息正确 用户名和密码都为空，验证登录失败，且提示信息正确（非空校验） 用户名和密码两者之一为空，验证登录失败，且提示信息正确（非空校验） 用户名和密码中含有空格的处理 用户名和密码是否对大小写敏感 用户名和密码的长度限制 输入密码时，键盘的大小写是否开启是否有提示 密码输入框是否有加密显示 如果启用验证码，验证码是否容易识别 如果启用验证码，输入正确的用户名、密码、验证码，验证登录成功 如果启用验证码，输入正确的用户名、密码和错误的验证码，验证登录失败，且提示信息正确 如果启用验证码，输入正确的用户名、密码，验证码为空，验证登录失败，且提示信息正确 如果启用验证码，验证码图片是否可以正常更换验证码，更换后是否可用 如果启用验证码，刷新页面是否会刷新验证码 如果启用验证码，验证码具有时效性，分别验证时效性内、外的有效性 快捷键tab和enter是否可以使用 用户第一次登录时，是否提示修改密码 不同权限的用户登录，展示的权限内容是否正确 用户成功登录，会话超时，继续操作是否会重定向用户登录界面 安全测试","tags":[{"name":"测试设计","slug":"测试设计","permalink":"https://yuxinla.github.io/tags/%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1/"},{"name":"测试点","slug":"测试点","permalink":"https://yuxinla.github.io/tags/%E6%B5%8B%E8%AF%95%E7%82%B9/"}]},{"title":"【数据库】MySQL的下载与安装教程","date":"2020-04-17T14:33:13.000Z","path":"article/202004172233.html","text":"Window环境1.下载MySQL 下载地址 根据需要下载安装包 2.安装 将下载的安装解压至指定的路径，如","tags":[{"name":"数据库","slug":"数据库","permalink":"https://yuxinla.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://yuxinla.github.io/tags/MySQL/"}]},{"title":"【安全测试】SQL注入测试总结","date":"2020-04-15T06:55:12.000Z","path":"article/202004151455.html","text":"前言本文参考《SQL注入攻击与防御》（第2版），记录对SQL注入测试方法进行一些个人的理解和总结。不要轻易尝试SQL注入操作，除非已得到应用或系统所有者的许可(最好是书面形式)！！！","tags":[{"name":"安全测试","slug":"安全测试","permalink":"https://yuxinla.github.io/tags/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"},{"name":"SQL","slug":"SQL","permalink":"https://yuxinla.github.io/tags/SQL/"}]},{"title":"【Hexo博客】Hexo+GitHub搭建blog","date":"2020-04-13T14:01:06.000Z","path":"article/202004132201.html","text":"1.Git安装 下载地址 安装步骤：双击下载好的exe文件，一直next 安装好后，打开gitbash，查看版本 1$ git --version 2.node.js安装 下载地址 安装步骤：双击下载好的msi文件，一直next，注意在Custom Setup这步选择Add to PATHS，可以自动配置环境变量 安装好后，使用gitbash或window的命令行查看版本 1$ node -v 如果查看版本报错，需要查看环境变量是否配置成功 3.node.js安装","tags":[{"name":"hexo","slug":"hexo","permalink":"https://yuxinla.github.io/tags/hexo/"}]},{"title":"Hello World","date":"2020-04-13T09:03:12.707Z","path":"article/202004131703.html","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]